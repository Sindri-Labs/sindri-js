[
    {
        "scope": "https://sindri.app:443",
        "method": "get",
        "path": "/robots.txt",
        "body": "",
        "status": 200,
        "response": "<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><meta name=\"viewport\" content=\"width=device-width,initial-scale=1,shrink-to-fit=no\"/><meta name=\"mobile-web-app-capable\" content=\"yes\"/><meta name=\"format-detection\" content=\"telephone=no\"/><title>Sindri</title><link rel=\"preconnect\" href=\"https://fonts.googleapis.com\"/><link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin/><link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;800&display=swap\" rel=\"stylesheet\"/><script defer=\"defer\" src=\"/runtime.30ef403476e3e0b7e5126f2bf73adaf4.js\"></script><script defer=\"defer\" src=\"/npm.mui.0b911dc429e4a0063355e6727bfda865.js\"></script><script defer=\"defer\" src=\"/npm.core-js.4a4d82d0a402a1542119c48bec590bc2.js\"></script><script defer=\"defer\" src=\"/npm.moment.7ade13edecb1a25b3c7970b6cb2f3988.js\"></script><script defer=\"defer\" src=\"/npm.react-redux.9a6d3de1ceff07c4a1e29b3371cd73ed.js\"></script><script defer=\"defer\" src=\"/npm.emotion.f7332e6603cd98c6094b6f8899fcfa6b.js\"></script><script defer=\"defer\" src=\"/npm.redux-persist.4c4b78a1b7c8c7f327d4aeb3a7c23445.js\"></script><script defer=\"defer\" src=\"/npm.react-router.6f25fa7680daa338de5b4b74b5f8a2c2.js\"></script><script defer=\"defer\" src=\"/npm.react-transition-group.d98ae7fc5c853d3e99debcd8d05ddc19.js\"></script><script defer=\"defer\" src=\"/npm.reduxjs.6c9b43ff2be88131d7e53cd019f54782.js\"></script><script defer=\"defer\" src=\"/npm.floating-ui.627b2f7cd13096c7a6803d4e65f58ae9.js\"></script><script defer=\"defer\" src=\"/npm.styled-components.717cac08aa7d011c525fee66b5846991.js\"></script><script defer=\"defer\" src=\"/npm.react-dropzone.6188accaaa08e13a91b1464693bde3aa.js\"></script><script defer=\"defer\" src=\"/npm.react-dom.689ade6574851e1962f847b3d5b8bfa5.js\"></script><script defer=\"defer\" src=\"/npm.sweetalert2.5f59dfd36c3ecbb9cd472c0e76133d6b.js\"></script><script defer=\"defer\" src=\"/npm.popperjs.4789ecd07935921773dffa5dfdbdbed5.js\"></script><script defer=\"defer\" src=\"/895.208c34bb5c3ecb0422a91ceaa91094d4.js\"></script><script defer=\"defer\" src=\"/main.6f83d425c82354878fbbaf1db76ab982.js\"></script><meta name=\"apple-mobile-web-app-title\" content=\"React Boilerplate\" /><meta name=\"apple-mobile-web-app-capable\" content=\"yes\" /><meta name=\"apple-mobile-web-app-status-bar-style\" content=\"default\" /><meta name=\"theme-color\" content=\"#b1624d\" /><link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/icon_180x180.63c71ff1fe800fe7fc6a16584342cb4c.png\" /><link rel=\"apple-touch-icon\" sizes=\"167x167\" href=\"/icon_167x167.359d468d6c991c5c01aa3cdcfaeea8bd.png\" /><link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"/icon_152x152.3b0f40a9c71e9ad8aa01e085feaa48f7.png\" /><link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"/icon_120x120.f51c13266175c3794ce042c18f41966b.png\" /><link rel=\"manifest\" href=\"/manifest.8259ad0cff5bad38962209630528b19c.json\" /></head><body><noscript>If you're seeing this message, that means <strong>JavaScript has been disabled on your browser</strong>, please <strong>enable JS</strong> to make this app work.</noscript><div id=\"app\"></div><link href=\"https://cdn.jsdelivr.net/npm/@sweetalert2/theme-material-ui/material-ui.css\" rel=\"stylesheet\"/></body></html>",
        "rawHeaders": [
            "Accept-Ranges",
            "bytes",
            "Cache-Control",
            "public, no-cache",
            "Content-Length",
            "3172",
            "Content-Type",
            "text/html",
            "Date",
            "Sat, 06 Jan 2024 05:42:14 GMT",
            "Etag",
            "\"658b31ce-c64\"",
            "Last-Modified",
            "Tue, 26 Dec 2023 20:04:30 GMT",
            "Server",
            "nginx/1.25.3",
            "Connection",
            "close"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://sindri.app:443",
        "method": "get",
        "path": "/api/v1/sindri-manifest-schema.json",
        "body": "",
        "status": 200,
        "response": {
            "$id": "https://sindri.app/api/v1/sindri-manifest-schema.json",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "title": "SindriManifest",
            "description": "Sindri Manifest file schema for `sindri.json` files.",
            "anyOf": [
                {
                    "$ref": "#/definitions/CircomSindriManifest"
                },
                {
                    "$ref": "#/definitions/GnarkSindriManifest"
                },
                {
                    "$ref": "#/definitions/Halo2AxiomV022SindriManifest"
                },
                {
                    "$ref": "#/definitions/Halo2AxiomV030SindriManifest"
                },
                {
                    "$ref": "#/definitions/NoirSindriManifest"
                }
            ],
            "definitions": {
                "CircomCurveOptions": {
                    "title": "CircomCurveOptions",
                    "description": "The supported Circom curves.",
                    "enum": [
                        "bn254"
                    ],
                    "type": "string"
                },
                "CircomProvingSchemeOptions": {
                    "title": "CircomProvingSchemeOptions",
                    "description": "The supported Circom proving schemes.",
                    "enum": [
                        "groth16"
                    ],
                    "type": "string"
                },
                "CircomWitnessCompilerOptions": {
                    "title": "CircomWitnessCompilerOptions",
                    "description": "The supported Circom witness compilers.",
                    "enum": [
                        "c++",
                        "wasm"
                    ],
                    "type": "string"
                },
                "CircomSindriManifest": {
                    "title": "Sindri Manifest for Circom Circuits",
                    "description": "Sindri Manifest for Circom circuits.",
                    "type": "object",
                    "properties": {
                        "name": {
                            "title": "Circuit Name",
                            "description": "The circuit name used to uniquely identify the circuit within your organization. Similar to a GitHub project name or a Docker image name.",
                            "pattern": "^[-a-zA-Z0-9_]+$",
                            "error_messages": {
                                "regex": "`name` must be a valid slug."
                            },
                            "type": "string"
                        },
                        "circuitType": {
                            "title": "Circuit Type",
                            "description": "The (frontend) development framework that your circuit is written with.",
                            "enum": [
                                "circom"
                            ],
                            "type": "string"
                        },
                        "curve": {
                            "title": "Proving Curve",
                            "description": "The curve over which the proof is executed.",
                            "default": "bn254",
                            "allOf": [
                                {
                                    "$ref": "#/definitions/CircomCurveOptions"
                                }
                            ]
                        },
                        "provingScheme": {
                            "description": "The backend proving scheme.",
                            "default": "groth16",
                            "allOf": [
                                {
                                    "$ref": "#/definitions/CircomProvingSchemeOptions"
                                }
                            ]
                        },
                        "witnessCompiler": {
                            "description": "The circuit witness compiler.",
                            "default": "c++",
                            "allOf": [
                                {
                                    "$ref": "#/definitions/CircomWitnessCompilerOptions"
                                }
                            ]
                        },
                        "$schema": {
                            "type": "string",
                            "title": "Sindri Manifest JSON Schema URL",
                            "description": "The URL pointing to a Sindri JSON Manifest schema definition.",
                            "examples": [
                                "https://sindri.app/api/v1/sindri-manifest-schema.json"
                            ]
                        }
                    },
                    "required": [
                        "name",
                        "circuitType"
                    ],
                    "additionalProperties": false
                },
                "GnarkCurveOptions": {
                    "title": "GnarkCurveOptions",
                    "description": "The supported Gnark curves.",
                    "enum": [
                        "bls12-377",
                        "bls12-381",
                        "bls24-315",
                        "bn254",
                        "bw6-633",
                        "bw6-761"
                    ],
                    "type": "string"
                },
                "GnarkVersionOptions": {
                    "title": "GnarkVersionOptions",
                    "description": "The supported Gnark framework versions.",
                    "enum": [
                        "v0.8.1",
                        "v0.9.0"
                    ],
                    "type": "string"
                },
                "GnarkProvingSchemeOptions": {
                    "title": "GnarkProvingSchemeOptions",
                    "description": "The supported Gnark proving schemes.",
                    "enum": [
                        "groth16"
                    ],
                    "type": "string"
                },
                "GnarkSindriManifest": {
                    "title": "Sindri Manifest for Gnark Circuits",
                    "description": "Sindri Manifest for Gnark circuits.",
                    "type": "object",
                    "properties": {
                        "name": {
                            "title": "Circuit Name",
                            "description": "The circuit name used to uniquely identify the circuit within your organization. Similar to a GitHub project name or a Docker image name.",
                            "pattern": "^[-a-zA-Z0-9_]+$",
                            "error_messages": {
                                "regex": "`name` must be a valid slug."
                            },
                            "type": "string"
                        },
                        "circuitStructName": {
                            "title": "Circuit Struct Name",
                            "description": "The name of the Go struct which defines your circuit inputs.",
                            "pattern": "^[A-Z][A-Za-z0-9_]*$",
                            "error_messages": {
                                "regex": "`circuitStructName` must be a valid Go exported struct name."
                            },
                            "type": "string"
                        },
                        "circuitType": {
                            "title": "Circuit Type",
                            "description": "The (frontend) development framework that your circuit is written with.",
                            "enum": [
                                "gnark"
                            ],
                            "type": "string"
                        },
                        "curve": {
                            "title": "Proving Curve",
                            "description": "The curve over which the proof is executed.",
                            "default": "bn254",
                            "allOf": [
                                {
                                    "$ref": "#/definitions/GnarkCurveOptions"
                                }
                            ]
                        },
                        "gnarkVersion": {
                            "description": "The version of the Gnark framework that your circuit uses.",
                            "allOf": [
                                {
                                    "$ref": "#/definitions/GnarkVersionOptions"
                                }
                            ]
                        },
                        "packageName": {
                            "title": "Go Package Name",
                            "description": "The name of the Go package containing your circuit definition.",
                            "pattern": "^[a-z][a-z0-9]*$",
                            "error_messages": {
                                "regex": "`packageName` must be a valid Go package name."
                            },
                            "type": "string"
                        },
                        "provingScheme": {
                            "description": "The backend proving scheme.",
                            "default": "groth16",
                            "allOf": [
                                {
                                    "$ref": "#/definitions/GnarkProvingSchemeOptions"
                                }
                            ]
                        },
                        "$schema": {
                            "type": "string",
                            "title": "Sindri Manifest JSON Schema URL",
                            "description": "The URL pointing to a Sindri JSON Manifest schema definition.",
                            "examples": [
                                "https://sindri.app/api/v1/sindri-manifest-schema.json"
                            ]
                        }
                    },
                    "required": [
                        "name",
                        "circuitStructName",
                        "circuitType",
                        "gnarkVersion",
                        "packageName"
                    ],
                    "additionalProperties": false
                },
                "Halo2ProvingSchemeOptions": {
                    "title": "Halo2ProvingSchemeOptions",
                    "description": "The supported Halo2 proving schemes.",
                    "enum": [
                        "shplonk"
                    ],
                    "type": "string"
                },
                "Halo2AxiomV022SindriManifest": {
                    "title": "Sindri Manifest for Axiom v0.2.2 Halo2 Circuits",
                    "description": "Sindri Manifest for Axiom v0.2.2 circuits built with the Halo2 framework.",
                    "type": "object",
                    "properties": {
                        "name": {
                            "title": "Circuit Name",
                            "description": "The circuit name used to uniquely identify the circuit within your organization. Similar to a GitHub project name or a Docker image name.",
                            "pattern": "^[-a-zA-Z0-9_]+$",
                            "error_messages": {
                                "regex": "`name` must be a valid slug."
                            },
                            "type": "string"
                        },
                        "circuitType": {
                            "title": "Circuit Type",
                            "description": "The (frontend) development framework that your circuit is written with.",
                            "enum": [
                                "halo2"
                            ],
                            "type": "string"
                        },
                        "className": {
                            "title": "Circuit Class Name",
                            "description": "The path to your circuit struct definition. (*e.g.* `my-package::my_file::MyCircuitStruct`).",
                            "pattern": "^([A-Za-z_][A-Za-z0-9_]*::)+[A-Za-z_][A-Za-z0-9_]*$",
                            "error_messages": {
                                "regex": "`className` must be a valid and fully qualifed Rust path to a struct including the crate name."
                            },
                            "type": "string"
                        },
                        "degree": {
                            "title": "Degree",
                            "description": "Specifies that the circuit will have 2^degree rows.",
                            "type": "integer"
                        },
                        "packageName": {
                            "title": "Rust Package Name",
                            "description": "The name of the Rust package containing your circuit.",
                            "pattern": "^[a-z0-9_]+(?:-[a-z0-9_]+)*$",
                            "error_messages": {
                                "regex": "`packageName` must be a valid Rust crate name."
                            },
                            "type": "string"
                        },
                        "provingScheme": {
                            "description": "The backend proving scheme.",
                            "default": "shplonk",
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Halo2ProvingSchemeOptions"
                                }
                            ]
                        },
                        "halo2Version": {
                            "title": "Halo2 Version",
                            "description": "The Halo2 frontend that your circuit is written with.",
                            "enum": [
                                "axiom-v0.2.2"
                            ],
                            "type": "string"
                        },
                        "$schema": {
                            "type": "string",
                            "title": "Sindri Manifest JSON Schema URL",
                            "description": "The URL pointing to a Sindri JSON Manifest schema definition.",
                            "examples": [
                                "https://sindri.app/api/v1/sindri-manifest-schema.json"
                            ]
                        }
                    },
                    "required": [
                        "name",
                        "circuitType",
                        "className",
                        "degree",
                        "packageName",
                        "halo2Version"
                    ],
                    "additionalProperties": false
                },
                "Halo2AxiomV030SindriManifest": {
                    "title": "Sindri Manifest for Axiom v0.3.0 Halo2 Circuits",
                    "description": "Sindri Manifest for Axiom v0.3.0 circuits built with the Halo2 framework.",
                    "type": "object",
                    "properties": {
                        "name": {
                            "title": "Circuit Name",
                            "description": "The circuit name used to uniquely identify the circuit within your organization. Similar to a GitHub project name or a Docker image name.",
                            "pattern": "^[-a-zA-Z0-9_]+$",
                            "error_messages": {
                                "regex": "`name` must be a valid slug."
                            },
                            "type": "string"
                        },
                        "circuitType": {
                            "title": "Circuit Type",
                            "description": "The (frontend) development framework that your circuit is written with.",
                            "enum": [
                                "halo2"
                            ],
                            "type": "string"
                        },
                        "className": {
                            "title": "Circuit Class Name",
                            "description": "The path to your circuit struct definition. (*e.g.* `my-package::my_file::MyCircuitStruct`).",
                            "pattern": "^([A-Za-z_][A-Za-z0-9_]*::)+[A-Za-z_][A-Za-z0-9_]*$",
                            "error_messages": {
                                "regex": "`className` must be a valid and fully qualifed Rust path to a struct including the crate name."
                            },
                            "type": "string"
                        },
                        "degree": {
                            "title": "Degree",
                            "description": "Specifies that the circuit will have 2^degree rows.",
                            "type": "integer"
                        },
                        "packageName": {
                            "title": "Rust Package Name",
                            "description": "The name of the Rust package containing your circuit.",
                            "pattern": "^[a-z0-9_]+(?:-[a-z0-9_]+)*$",
                            "error_messages": {
                                "regex": "`packageName` must be a valid Rust crate name."
                            },
                            "type": "string"
                        },
                        "provingScheme": {
                            "description": "The backend proving scheme.",
                            "default": "shplonk",
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Halo2ProvingSchemeOptions"
                                }
                            ]
                        },
                        "halo2Version": {
                            "title": "Halo2 Version",
                            "description": "The Halo2 frontend that your circuit is written with.",
                            "enum": [
                                "axiom-v0.3.0"
                            ],
                            "type": "string"
                        },
                        "threadBuilder": {
                            "title": "Thread Builder",
                            "description": "The type of multi-threaded witness generator used. Choose GateThreadBuilder for simple circuits or RlcThreadBuilder for advanced applications that require sources of randomness.",
                            "enum": [
                                "GateThreadBuilder",
                                "RlcThreadBuilder"
                            ],
                            "type": "string"
                        },
                        "$schema": {
                            "type": "string",
                            "title": "Sindri Manifest JSON Schema URL",
                            "description": "The URL pointing to a Sindri JSON Manifest schema definition.",
                            "examples": [
                                "https://sindri.app/api/v1/sindri-manifest-schema.json"
                            ]
                        }
                    },
                    "required": [
                        "name",
                        "circuitType",
                        "className",
                        "degree",
                        "packageName",
                        "halo2Version",
                        "threadBuilder"
                    ],
                    "additionalProperties": false
                },
                "NoirProvingSchemeOptions": {
                    "title": "NoirProvingSchemeOptions",
                    "description": "The supported Noir proving schemes.",
                    "enum": [
                        "barretenberg"
                    ],
                    "type": "string"
                },
                "NoirSindriManifest": {
                    "title": "Sindri Manifest for Noir Circuits",
                    "description": "Sindri Manifest for Noir circuits.",
                    "type": "object",
                    "properties": {
                        "name": {
                            "title": "Circuit Name",
                            "description": "The circuit name used to uniquely identify the circuit within your organization. Similar to a GitHub project name or a Docker image name.",
                            "pattern": "^[-a-zA-Z0-9_]+$",
                            "error_messages": {
                                "regex": "`name` must be a valid slug."
                            },
                            "type": "string"
                        },
                        "circuitType": {
                            "title": "Circuit Type",
                            "description": "The (frontend) development framework that your circuit is written with.",
                            "enum": [
                                "noir"
                            ],
                            "type": "string"
                        },
                        "provingScheme": {
                            "description": "The backend proving scheme.",
                            "default": "barretenberg",
                            "allOf": [
                                {
                                    "$ref": "#/definitions/NoirProvingSchemeOptions"
                                }
                            ]
                        },
                        "$schema": {
                            "type": "string",
                            "title": "Sindri Manifest JSON Schema URL",
                            "description": "The URL pointing to a Sindri JSON Manifest schema definition.",
                            "examples": [
                                "https://sindri.app/api/v1/sindri-manifest-schema.json"
                            ]
                        }
                    },
                    "required": [
                        "name",
                        "circuitType"
                    ],
                    "additionalProperties": false
                }
            }
        },
        "rawHeaders": [
            "Access-Control-Allow-Origin",
            "*",
            "Content-Length",
            "14963",
            "Content-Type",
            "application/schema+json",
            "Date",
            "Sat, 06 Jan 2024 05:42:14 GMT",
            "Referrer-Policy",
            "same-origin",
            "Server",
            "gunicorn",
            "Vary",
            "Cookie, origin",
            "X-Content-Type-Options",
            "nosniff",
            "X-Frame-Options",
            "SAMEORIGIN",
            "Connection",
            "close"
        ],
        "responseIsBinary": false
    },
    {
        "scope": "https://sindri.app:443",
        "method": "get",
        "path": "/api/v1/sindri-manifest-schema.json",
        "body": "",
        "status": 200,
        "response": {
            "$id": "https://sindri.app/api/v1/sindri-manifest-schema.json",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "title": "SindriManifest",
            "description": "Sindri Manifest file schema for `sindri.json` files.",
            "anyOf": [
                {
                    "$ref": "#/definitions/CircomSindriManifest"
                },
                {
                    "$ref": "#/definitions/GnarkSindriManifest"
                },
                {
                    "$ref": "#/definitions/Halo2AxiomV022SindriManifest"
                },
                {
                    "$ref": "#/definitions/Halo2AxiomV030SindriManifest"
                },
                {
                    "$ref": "#/definitions/NoirSindriManifest"
                }
            ],
            "definitions": {
                "CircomCurveOptions": {
                    "title": "CircomCurveOptions",
                    "description": "The supported Circom curves.",
                    "enum": [
                        "bn254"
                    ],
                    "type": "string"
                },
                "CircomProvingSchemeOptions": {
                    "title": "CircomProvingSchemeOptions",
                    "description": "The supported Circom proving schemes.",
                    "enum": [
                        "groth16"
                    ],
                    "type": "string"
                },
                "CircomWitnessCompilerOptions": {
                    "title": "CircomWitnessCompilerOptions",
                    "description": "The supported Circom witness compilers.",
                    "enum": [
                        "c++",
                        "wasm"
                    ],
                    "type": "string"
                },
                "CircomSindriManifest": {
                    "title": "Sindri Manifest for Circom Circuits",
                    "description": "Sindri Manifest for Circom circuits.",
                    "type": "object",
                    "properties": {
                        "name": {
                            "title": "Circuit Name",
                            "description": "The circuit name used to uniquely identify the circuit within your organization. Similar to a GitHub project name or a Docker image name.",
                            "pattern": "^[-a-zA-Z0-9_]+$",
                            "error_messages": {
                                "regex": "`name` must be a valid slug."
                            },
                            "type": "string"
                        },
                        "circuitType": {
                            "title": "Circuit Type",
                            "description": "The (frontend) development framework that your circuit is written with.",
                            "enum": [
                                "circom"
                            ],
                            "type": "string"
                        },
                        "curve": {
                            "title": "Proving Curve",
                            "description": "The curve over which the proof is executed.",
                            "default": "bn254",
                            "allOf": [
                                {
                                    "$ref": "#/definitions/CircomCurveOptions"
                                }
                            ]
                        },
                        "provingScheme": {
                            "description": "The backend proving scheme.",
                            "default": "groth16",
                            "allOf": [
                                {
                                    "$ref": "#/definitions/CircomProvingSchemeOptions"
                                }
                            ]
                        },
                        "witnessCompiler": {
                            "description": "The circuit witness compiler.",
                            "default": "c++",
                            "allOf": [
                                {
                                    "$ref": "#/definitions/CircomWitnessCompilerOptions"
                                }
                            ]
                        },
                        "$schema": {
                            "type": "string",
                            "title": "Sindri Manifest JSON Schema URL",
                            "description": "The URL pointing to a Sindri JSON Manifest schema definition.",
                            "examples": [
                                "https://sindri.app/api/v1/sindri-manifest-schema.json"
                            ]
                        }
                    },
                    "required": [
                        "name",
                        "circuitType"
                    ],
                    "additionalProperties": false
                },
                "GnarkCurveOptions": {
                    "title": "GnarkCurveOptions",
                    "description": "The supported Gnark curves.",
                    "enum": [
                        "bls12-377",
                        "bls12-381",
                        "bls24-315",
                        "bn254",
                        "bw6-633",
                        "bw6-761"
                    ],
                    "type": "string"
                },
                "GnarkVersionOptions": {
                    "title": "GnarkVersionOptions",
                    "description": "The supported Gnark framework versions.",
                    "enum": [
                        "v0.8.1",
                        "v0.9.0"
                    ],
                    "type": "string"
                },
                "GnarkProvingSchemeOptions": {
                    "title": "GnarkProvingSchemeOptions",
                    "description": "The supported Gnark proving schemes.",
                    "enum": [
                        "groth16"
                    ],
                    "type": "string"
                },
                "GnarkSindriManifest": {
                    "title": "Sindri Manifest for Gnark Circuits",
                    "description": "Sindri Manifest for Gnark circuits.",
                    "type": "object",
                    "properties": {
                        "name": {
                            "title": "Circuit Name",
                            "description": "The circuit name used to uniquely identify the circuit within your organization. Similar to a GitHub project name or a Docker image name.",
                            "pattern": "^[-a-zA-Z0-9_]+$",
                            "error_messages": {
                                "regex": "`name` must be a valid slug."
                            },
                            "type": "string"
                        },
                        "circuitStructName": {
                            "title": "Circuit Struct Name",
                            "description": "The name of the Go struct which defines your circuit inputs.",
                            "pattern": "^[A-Z][A-Za-z0-9_]*$",
                            "error_messages": {
                                "regex": "`circuitStructName` must be a valid Go exported struct name."
                            },
                            "type": "string"
                        },
                        "circuitType": {
                            "title": "Circuit Type",
                            "description": "The (frontend) development framework that your circuit is written with.",
                            "enum": [
                                "gnark"
                            ],
                            "type": "string"
                        },
                        "curve": {
                            "title": "Proving Curve",
                            "description": "The curve over which the proof is executed.",
                            "default": "bn254",
                            "allOf": [
                                {
                                    "$ref": "#/definitions/GnarkCurveOptions"
                                }
                            ]
                        },
                        "gnarkVersion": {
                            "description": "The version of the Gnark framework that your circuit uses.",
                            "allOf": [
                                {
                                    "$ref": "#/definitions/GnarkVersionOptions"
                                }
                            ]
                        },
                        "packageName": {
                            "title": "Go Package Name",
                            "description": "The name of the Go package containing your circuit definition.",
                            "pattern": "^[a-z][a-z0-9]*$",
                            "error_messages": {
                                "regex": "`packageName` must be a valid Go package name."
                            },
                            "type": "string"
                        },
                        "provingScheme": {
                            "description": "The backend proving scheme.",
                            "default": "groth16",
                            "allOf": [
                                {
                                    "$ref": "#/definitions/GnarkProvingSchemeOptions"
                                }
                            ]
                        },
                        "$schema": {
                            "type": "string",
                            "title": "Sindri Manifest JSON Schema URL",
                            "description": "The URL pointing to a Sindri JSON Manifest schema definition.",
                            "examples": [
                                "https://sindri.app/api/v1/sindri-manifest-schema.json"
                            ]
                        }
                    },
                    "required": [
                        "name",
                        "circuitStructName",
                        "circuitType",
                        "gnarkVersion",
                        "packageName"
                    ],
                    "additionalProperties": false
                },
                "Halo2ProvingSchemeOptions": {
                    "title": "Halo2ProvingSchemeOptions",
                    "description": "The supported Halo2 proving schemes.",
                    "enum": [
                        "shplonk"
                    ],
                    "type": "string"
                },
                "Halo2AxiomV022SindriManifest": {
                    "title": "Sindri Manifest for Axiom v0.2.2 Halo2 Circuits",
                    "description": "Sindri Manifest for Axiom v0.2.2 circuits built with the Halo2 framework.",
                    "type": "object",
                    "properties": {
                        "name": {
                            "title": "Circuit Name",
                            "description": "The circuit name used to uniquely identify the circuit within your organization. Similar to a GitHub project name or a Docker image name.",
                            "pattern": "^[-a-zA-Z0-9_]+$",
                            "error_messages": {
                                "regex": "`name` must be a valid slug."
                            },
                            "type": "string"
                        },
                        "circuitType": {
                            "title": "Circuit Type",
                            "description": "The (frontend) development framework that your circuit is written with.",
                            "enum": [
                                "halo2"
                            ],
                            "type": "string"
                        },
                        "className": {
                            "title": "Circuit Class Name",
                            "description": "The path to your circuit struct definition. (*e.g.* `my-package::my_file::MyCircuitStruct`).",
                            "pattern": "^([A-Za-z_][A-Za-z0-9_]*::)+[A-Za-z_][A-Za-z0-9_]*$",
                            "error_messages": {
                                "regex": "`className` must be a valid and fully qualifed Rust path to a struct including the crate name."
                            },
                            "type": "string"
                        },
                        "degree": {
                            "title": "Degree",
                            "description": "Specifies that the circuit will have 2^degree rows.",
                            "type": "integer"
                        },
                        "packageName": {
                            "title": "Rust Package Name",
                            "description": "The name of the Rust package containing your circuit.",
                            "pattern": "^[a-z0-9_]+(?:-[a-z0-9_]+)*$",
                            "error_messages": {
                                "regex": "`packageName` must be a valid Rust crate name."
                            },
                            "type": "string"
                        },
                        "provingScheme": {
                            "description": "The backend proving scheme.",
                            "default": "shplonk",
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Halo2ProvingSchemeOptions"
                                }
                            ]
                        },
                        "halo2Version": {
                            "title": "Halo2 Version",
                            "description": "The Halo2 frontend that your circuit is written with.",
                            "enum": [
                                "axiom-v0.2.2"
                            ],
                            "type": "string"
                        },
                        "$schema": {
                            "type": "string",
                            "title": "Sindri Manifest JSON Schema URL",
                            "description": "The URL pointing to a Sindri JSON Manifest schema definition.",
                            "examples": [
                                "https://sindri.app/api/v1/sindri-manifest-schema.json"
                            ]
                        }
                    },
                    "required": [
                        "name",
                        "circuitType",
                        "className",
                        "degree",
                        "packageName",
                        "halo2Version"
                    ],
                    "additionalProperties": false
                },
                "Halo2AxiomV030SindriManifest": {
                    "title": "Sindri Manifest for Axiom v0.3.0 Halo2 Circuits",
                    "description": "Sindri Manifest for Axiom v0.3.0 circuits built with the Halo2 framework.",
                    "type": "object",
                    "properties": {
                        "name": {
                            "title": "Circuit Name",
                            "description": "The circuit name used to uniquely identify the circuit within your organization. Similar to a GitHub project name or a Docker image name.",
                            "pattern": "^[-a-zA-Z0-9_]+$",
                            "error_messages": {
                                "regex": "`name` must be a valid slug."
                            },
                            "type": "string"
                        },
                        "circuitType": {
                            "title": "Circuit Type",
                            "description": "The (frontend) development framework that your circuit is written with.",
                            "enum": [
                                "halo2"
                            ],
                            "type": "string"
                        },
                        "className": {
                            "title": "Circuit Class Name",
                            "description": "The path to your circuit struct definition. (*e.g.* `my-package::my_file::MyCircuitStruct`).",
                            "pattern": "^([A-Za-z_][A-Za-z0-9_]*::)+[A-Za-z_][A-Za-z0-9_]*$",
                            "error_messages": {
                                "regex": "`className` must be a valid and fully qualifed Rust path to a struct including the crate name."
                            },
                            "type": "string"
                        },
                        "degree": {
                            "title": "Degree",
                            "description": "Specifies that the circuit will have 2^degree rows.",
                            "type": "integer"
                        },
                        "packageName": {
                            "title": "Rust Package Name",
                            "description": "The name of the Rust package containing your circuit.",
                            "pattern": "^[a-z0-9_]+(?:-[a-z0-9_]+)*$",
                            "error_messages": {
                                "regex": "`packageName` must be a valid Rust crate name."
                            },
                            "type": "string"
                        },
                        "provingScheme": {
                            "description": "The backend proving scheme.",
                            "default": "shplonk",
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Halo2ProvingSchemeOptions"
                                }
                            ]
                        },
                        "halo2Version": {
                            "title": "Halo2 Version",
                            "description": "The Halo2 frontend that your circuit is written with.",
                            "enum": [
                                "axiom-v0.3.0"
                            ],
                            "type": "string"
                        },
                        "threadBuilder": {
                            "title": "Thread Builder",
                            "description": "The type of multi-threaded witness generator used. Choose GateThreadBuilder for simple circuits or RlcThreadBuilder for advanced applications that require sources of randomness.",
                            "enum": [
                                "GateThreadBuilder",
                                "RlcThreadBuilder"
                            ],
                            "type": "string"
                        },
                        "$schema": {
                            "type": "string",
                            "title": "Sindri Manifest JSON Schema URL",
                            "description": "The URL pointing to a Sindri JSON Manifest schema definition.",
                            "examples": [
                                "https://sindri.app/api/v1/sindri-manifest-schema.json"
                            ]
                        }
                    },
                    "required": [
                        "name",
                        "circuitType",
                        "className",
                        "degree",
                        "packageName",
                        "halo2Version",
                        "threadBuilder"
                    ],
                    "additionalProperties": false
                },
                "NoirProvingSchemeOptions": {
                    "title": "NoirProvingSchemeOptions",
                    "description": "The supported Noir proving schemes.",
                    "enum": [
                        "barretenberg"
                    ],
                    "type": "string"
                },
                "NoirSindriManifest": {
                    "title": "Sindri Manifest for Noir Circuits",
                    "description": "Sindri Manifest for Noir circuits.",
                    "type": "object",
                    "properties": {
                        "name": {
                            "title": "Circuit Name",
                            "description": "The circuit name used to uniquely identify the circuit within your organization. Similar to a GitHub project name or a Docker image name.",
                            "pattern": "^[-a-zA-Z0-9_]+$",
                            "error_messages": {
                                "regex": "`name` must be a valid slug."
                            },
                            "type": "string"
                        },
                        "circuitType": {
                            "title": "Circuit Type",
                            "description": "The (frontend) development framework that your circuit is written with.",
                            "enum": [
                                "noir"
                            ],
                            "type": "string"
                        },
                        "provingScheme": {
                            "description": "The backend proving scheme.",
                            "default": "barretenberg",
                            "allOf": [
                                {
                                    "$ref": "#/definitions/NoirProvingSchemeOptions"
                                }
                            ]
                        },
                        "$schema": {
                            "type": "string",
                            "title": "Sindri Manifest JSON Schema URL",
                            "description": "The URL pointing to a Sindri JSON Manifest schema definition.",
                            "examples": [
                                "https://sindri.app/api/v1/sindri-manifest-schema.json"
                            ]
                        }
                    },
                    "required": [
                        "name",
                        "circuitType"
                    ],
                    "additionalProperties": false
                }
            }
        },
        "rawHeaders": [
            "Access-Control-Allow-Origin",
            "*",
            "Content-Length",
            "14963",
            "Content-Type",
            "application/schema+json",
            "Date",
            "Sat, 06 Jan 2024 05:42:14 GMT",
            "Referrer-Policy",
            "same-origin",
            "Server",
            "gunicorn",
            "Vary",
            "Cookie, origin",
            "X-Content-Type-Options",
            "nosniff",
            "X-Frame-Options",
            "SAMEORIGIN",
            "Connection",
            "close"
        ],
        "responseIsBinary": false
    }
]