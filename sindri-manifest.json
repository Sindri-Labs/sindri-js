{
  "$id": "https://sindri.app/api/v1/sindri-manifest-schema.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "SindriManifest",
  "description": "Sindri Manifest file schema for `sindri.json` files.",
  "anyOf": [
    {
      "$ref": "#/definitions/CircomSindriManifest"
    },
    {
      "$ref": "#/definitions/GnarkSindriManifest"
    },
    {
      "$ref": "#/definitions/Halo2AxiomV022SindriManifest"
    },
    {
      "$ref": "#/definitions/Halo2AxiomV030SindriManifest"
    },
    {
      "$ref": "#/definitions/NoirSindriManifest"
    }
  ],
  "definitions": {
    "CircomCurveOptions": {
      "title": "CircomCurveOptions",
      "description": "The supported Circom curves.",
      "enum": ["bn254"],
      "type": "string"
    },
    "CircomProvingSchemeOptions": {
      "title": "CircomProvingSchemeOptions",
      "description": "The supported Circom proving schemes.",
      "enum": ["groth16"],
      "type": "string"
    },
    "CircomWitnessCompilerOptions": {
      "title": "CircomWitnessCompilerOptions",
      "description": "The supported Circom witness compilers.",
      "enum": ["c++", "wasm"],
      "type": "string"
    },
    "CircomSindriManifest": {
      "title": "Sindri Manifest for Circom Circuits",
      "description": "Sindri Manifest for Circom circuits.",
      "type": "object",
      "properties": {
        "circuitType": {
          "title": "Circuit Type",
          "description": "The (frontend) development framework that your circuit is written with.",
          "enum": ["circom"],
          "type": "string"
        },
        "name": {
          "title": "Circuit Name",
          "description": "The circuit name used to uniquely identify the circuit within your organization. Similar to a GitHub project name or a Docker image name.",
          "pattern": "^[a-zA-Z0-9_-]+$",
          "error_messages": {
            "regex": "`name` must be a valid slug."
          },
          "type": "string"
        },
        "circuitPath": {
          "title": "Circuit Path",
          "description": "Path to a `.circom` circuit file with a main component (defaults to `./circuit.circom`).",
          "default": "./circuit.circom",
          "pattern": "^[^/].*\\.circom$",
          "error_messages": {
            "regex": "`circuit_path` must be a valid relative path to your main `.circom` file."
          },
          "type": "string"
        },
        "curve": {
          "title": "Proving Curve",
          "description": "The curve over which the proof is executed.",
          "default": "bn254",
          "allOf": [
            {
              "$ref": "#/definitions/CircomCurveOptions"
            }
          ]
        },
        "provingScheme": {
          "description": "The backend proving scheme.",
          "default": "groth16",
          "allOf": [
            {
              "$ref": "#/definitions/CircomProvingSchemeOptions"
            }
          ]
        },
        "witnessCompiler": {
          "description": "The circuit witness compiler.",
          "default": "c++",
          "allOf": [
            {
              "$ref": "#/definitions/CircomWitnessCompilerOptions"
            }
          ]
        },
        "$schema": {
          "type": "string",
          "title": "Sindri Manifest JSON Schema URL",
          "description": "The URL pointing to a Sindri JSON Manifest schema definition.",
          "examples": ["https://sindri.app/api/v1/sindri-manifest-schema.json"]
        }
      },
      "required": ["circuitType", "name"],
      "additionalProperties": false
    },
    "GnarkCurveOptions": {
      "title": "GnarkCurveOptions",
      "description": "The supported Gnark curves.",
      "enum": [
        "bls12-377",
        "bls12-381",
        "bls24-315",
        "bn254",
        "bw6-633",
        "bw6-761"
      ],
      "type": "string"
    },
    "GnarkVersionOptions": {
      "title": "GnarkVersionOptions",
      "description": "The supported Gnark framework versions.",
      "enum": ["v0.8.1", "v0.9.0"],
      "type": "string"
    },
    "GnarkProvingSchemeOptions": {
      "title": "GnarkProvingSchemeOptions",
      "description": "The supported Gnark proving schemes.",
      "enum": ["groth16"],
      "type": "string"
    },
    "GnarkSindriManifest": {
      "title": "Sindri Manifest for Gnark Circuits",
      "description": "Sindri Manifest for Gnark circuits.",
      "type": "object",
      "properties": {
        "circuitType": {
          "title": "Circuit Type",
          "description": "The (frontend) development framework that your circuit is written with.",
          "enum": ["gnark"],
          "type": "string"
        },
        "name": {
          "title": "Circuit Name",
          "description": "The circuit name used to uniquely identify the circuit within your organization. Similar to a GitHub project name or a Docker image name.",
          "pattern": "^[a-zA-Z0-9_-]+$",
          "error_messages": {
            "regex": "`name` must be a valid slug."
          },
          "type": "string"
        },
        "circuitStructName": {
          "title": "Circuit Struct Name",
          "description": "The name of the Go struct which defines your circuit inputs.",
          "pattern": "^[A-Z][A-Za-z0-9_]*$",
          "error_messages": {
            "regex": "`circuitStructName` must be a valid Go exported struct name."
          },
          "type": "string"
        },
        "curve": {
          "title": "Proving Curve",
          "description": "The curve over which the proof is executed.",
          "default": "bn254",
          "allOf": [
            {
              "$ref": "#/definitions/GnarkCurveOptions"
            }
          ]
        },
        "gnarkVersion": {
          "description": "The version of the Gnark framework that your circuit uses.",
          "allOf": [
            {
              "$ref": "#/definitions/GnarkVersionOptions"
            }
          ]
        },
        "packageName": {
          "title": "Go Package Name",
          "description": "The name of the Go package containing your circuit definition.",
          "pattern": "^[a-z][a-z0-9]*$",
          "error_messages": {
            "regex": "`packageName` must be a valid Go package name."
          },
          "type": "string"
        },
        "provingScheme": {
          "description": "The backend proving scheme.",
          "default": "groth16",
          "allOf": [
            {
              "$ref": "#/definitions/GnarkProvingSchemeOptions"
            }
          ]
        },
        "$schema": {
          "type": "string",
          "title": "Sindri Manifest JSON Schema URL",
          "description": "The URL pointing to a Sindri JSON Manifest schema definition.",
          "examples": ["https://sindri.app/api/v1/sindri-manifest-schema.json"]
        }
      },
      "required": [
        "circuitType",
        "name",
        "circuitStructName",
        "gnarkVersion",
        "packageName"
      ],
      "additionalProperties": false
    },
    "Halo2CurveOptions": {
      "title": "Halo2CurveOptions",
      "description": "The supported Halo2 curves.",
      "enum": ["bn254"],
      "type": "string"
    },
    "Halo2ProvingSchemeOptions": {
      "title": "Halo2ProvingSchemeOptions",
      "description": "The supported Halo2 proving schemes.",
      "enum": ["shplonk"],
      "type": "string"
    },
    "Halo2AxiomV022SindriManifest": {
      "title": "Sindri Manifest for Axiom v0.2.2 Halo2 Circuits",
      "description": "Sindri Manifest for Axiom v0.2.2 circuits built with the Halo2 framework.",
      "type": "object",
      "properties": {
        "circuitType": {
          "title": "Circuit Type",
          "description": "The (frontend) development framework that your circuit is written with.",
          "enum": ["halo2"],
          "type": "string"
        },
        "name": {
          "title": "Circuit Name",
          "description": "The circuit name used to uniquely identify the circuit within your organization. Similar to a GitHub project name or a Docker image name.",
          "pattern": "^[a-zA-Z0-9_-]+$",
          "error_messages": {
            "regex": "`name` must be a valid slug."
          },
          "type": "string"
        },
        "curve": {
          "title": "Proving Curve",
          "description": "The curve over which the proof is executed.",
          "default": "bn254",
          "allOf": [
            {
              "$ref": "#/definitions/Halo2CurveOptions"
            }
          ]
        },
        "className": {
          "title": "Circuit Class Name",
          "description": "The path to your circuit struct definition. (*e.g.* `my-package::my_file::MyCircuitStruct`).",
          "pattern": "^([A-Za-z_][A-Za-z0-9_]*::)+[A-Za-z_][A-Za-z0-9_]*$",
          "error_messages": {
            "regex": "`className` must be a valid and fully qualifed Rust path to a struct including the crate name."
          },
          "type": "string"
        },
        "degree": {
          "title": "Degree",
          "description": "Specifies that the circuit will have 2^degree rows.",
          "type": "integer"
        },
        "halo2Version": {
          "title": "Halo2 Version",
          "description": "The Halo2 frontend that your circuit is written with.",
          "enum": ["axiom-v0.2.2"],
          "type": "string"
        },
        "packageName": {
          "title": "Rust Package Name",
          "description": "The name of the Rust package containing your circuit.",
          "pattern": "^[a-z0-9_]+(?:-[a-z0-9_]+)*$",
          "error_messages": {
            "regex": "`packageName` must be a valid Rust crate name."
          },
          "type": "string"
        },
        "provingScheme": {
          "description": "The backend proving scheme.",
          "default": "shplonk",
          "allOf": [
            {
              "$ref": "#/definitions/Halo2ProvingSchemeOptions"
            }
          ]
        },
        "$schema": {
          "type": "string",
          "title": "Sindri Manifest JSON Schema URL",
          "description": "The URL pointing to a Sindri JSON Manifest schema definition.",
          "examples": ["https://sindri.app/api/v1/sindri-manifest-schema.json"]
        }
      },
      "required": [
        "circuitType",
        "name",
        "className",
        "degree",
        "halo2Version",
        "packageName"
      ],
      "additionalProperties": false
    },
    "Halo2AxiomV030SindriManifest": {
      "title": "Sindri Manifest for Axiom v0.3.0 Halo2 Circuits",
      "description": "Sindri Manifest for Axiom v0.3.0 circuits built with the Halo2 framework.",
      "type": "object",
      "properties": {
        "circuitType": {
          "title": "Circuit Type",
          "description": "The (frontend) development framework that your circuit is written with.",
          "enum": ["halo2"],
          "type": "string"
        },
        "name": {
          "title": "Circuit Name",
          "description": "The circuit name used to uniquely identify the circuit within your organization. Similar to a GitHub project name or a Docker image name.",
          "pattern": "^[a-zA-Z0-9_-]+$",
          "error_messages": {
            "regex": "`name` must be a valid slug."
          },
          "type": "string"
        },
        "curve": {
          "title": "Proving Curve",
          "description": "The curve over which the proof is executed.",
          "default": "bn254",
          "allOf": [
            {
              "$ref": "#/definitions/Halo2CurveOptions"
            }
          ]
        },
        "className": {
          "title": "Circuit Class Name",
          "description": "The path to your circuit struct definition. (*e.g.* `my-package::my_file::MyCircuitStruct`).",
          "pattern": "^([A-Za-z_][A-Za-z0-9_]*::)+[A-Za-z_][A-Za-z0-9_]*$",
          "error_messages": {
            "regex": "`className` must be a valid and fully qualifed Rust path to a struct including the crate name."
          },
          "type": "string"
        },
        "degree": {
          "title": "Degree",
          "description": "Specifies that the circuit will have 2^degree rows.",
          "type": "integer"
        },
        "halo2Version": {
          "title": "Halo2 Version",
          "description": "The Halo2 frontend that your circuit is written with.",
          "enum": ["axiom-v0.3.0"],
          "type": "string"
        },
        "packageName": {
          "title": "Rust Package Name",
          "description": "The name of the Rust package containing your circuit.",
          "pattern": "^[a-z0-9_]+(?:-[a-z0-9_]+)*$",
          "error_messages": {
            "regex": "`packageName` must be a valid Rust crate name."
          },
          "type": "string"
        },
        "provingScheme": {
          "description": "The backend proving scheme.",
          "default": "shplonk",
          "allOf": [
            {
              "$ref": "#/definitions/Halo2ProvingSchemeOptions"
            }
          ]
        },
        "threadBuilder": {
          "title": "Thread Builder",
          "description": "The type of multi-threaded witness generator used. Choose GateThreadBuilder for simple circuits or RlcThreadBuilder for advanced applications that require sources of randomness.",
          "enum": ["GateThreadBuilder", "RlcThreadBuilder"],
          "type": "string"
        },
        "$schema": {
          "type": "string",
          "title": "Sindri Manifest JSON Schema URL",
          "description": "The URL pointing to a Sindri JSON Manifest schema definition.",
          "examples": ["https://sindri.app/api/v1/sindri-manifest-schema.json"]
        }
      },
      "required": [
        "circuitType",
        "name",
        "className",
        "degree",
        "halo2Version",
        "packageName",
        "threadBuilder"
      ],
      "additionalProperties": false
    },
    "NoirCurveOptions": {
      "title": "NoirCurveOptions",
      "description": "The supported Noir curves.",
      "enum": ["bn254"],
      "type": "string"
    },
    "NoirProvingSchemeOptions": {
      "title": "NoirProvingSchemeOptions",
      "description": "The supported Noir proving schemes.",
      "enum": ["barretenberg"],
      "type": "string"
    },
    "NoirVersionOptions": {
      "title": "NoirVersionOptions",
      "description": "The supported Noir Compiler and Prover versions.",
      "enum": ["latest", "0.17.0", "0.18.0", "0.19.4", "0.22.0", "0.23.0"],
      "type": "string"
    },
    "NoirSindriManifest": {
      "title": "Sindri Manifest for Noir Circuits",
      "description": "Sindri Manifest for Noir circuits.",
      "type": "object",
      "properties": {
        "circuitType": {
          "title": "Circuit Type",
          "description": "The (frontend) development framework that your circuit is written with.",
          "enum": ["noir"],
          "type": "string"
        },
        "name": {
          "title": "Circuit Name",
          "description": "The circuit name used to uniquely identify the circuit within your organization. Similar to a GitHub project name or a Docker image name.",
          "pattern": "^[a-zA-Z0-9_-]+$",
          "error_messages": {
            "regex": "`name` must be a valid slug."
          },
          "type": "string"
        },
        "curve": {
          "title": "Proving Curve",
          "description": "The curve over which the proof is executed.",
          "default": "bn254",
          "allOf": [
            {
              "$ref": "#/definitions/NoirCurveOptions"
            }
          ]
        },
        "provingScheme": {
          "description": "The backend proving scheme.",
          "default": "barretenberg",
          "allOf": [
            {
              "$ref": "#/definitions/NoirProvingSchemeOptions"
            }
          ]
        },
        "noirVersion": {
          "description": "Noir compiler version (defaults to `latest`).",
          "default": "latest",
          "allOf": [
            {
              "$ref": "#/definitions/NoirVersionOptions"
            }
          ]
        },
        "$schema": {
          "type": "string",
          "title": "Sindri Manifest JSON Schema URL",
          "description": "The URL pointing to a Sindri JSON Manifest schema definition.",
          "examples": ["https://sindri.app/api/v1/sindri-manifest-schema.json"]
        }
      },
      "required": ["circuitType", "name"],
      "additionalProperties": false
    }
  }
}
